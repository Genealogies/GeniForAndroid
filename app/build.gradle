import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

def chiave

android {
	signingConfigs {
		def out = services.get(StyledTextOutputFactory).create("")
		if (System.env.USER == "hannes") {
			release {
				def keystore = "${project.gradle.gradleUserHomeDir}/../.android/debug.keystore"
				out.style(Style.Normal).text("I run with user hannes using ")
						.style(Style.SuccessHeader).println(keystore)
				storePassword "android"
				keyPassword "android"
				keyAlias "androiddebugkey"
				storeFile file(keystore)
			}
		} else if (System.getenv("TRAVIS")) {
			release {
				out.style(Style.Normal).text("I run on TRAVIS")
				storeFile file('../signing/release.keystore')
				storePassword System.getenv("KEYSTORE_PASS")
				keyAlias System.getenv("ALIAS_NAME")
				keyPassword System.getenv("ALIAS_PASS")
			}
		} else {
			release {
				out.style(Style.Normal).text("I run on Github actions")
				storeFile file('../signing/release.keystore')
				storePassword System.getenv("KEYSTORE_PASS")
				keyAlias System.getenv("ALIAS_NAME")
				keyPassword System.getenv("ALIAS_PASS")
			}
		}
		debugCI {
			storeFile file('./debug.keystore')
			storePassword "android"
			keyPassword "android"
			keyAlias "androiddebugkey"
		}
	}

	compileSdkVersion 33
	defaultConfig {
		applicationId "app.familygem"
		minSdkVersion 21
		targetSdkVersion 33
		versionCode getGitCommitCount()
		versionName getTag()
		vectorDrawables.useSupportLibrary = true
		resConfigs 'cs', 'de', 'en', 'eo', 'es', 'fa', 'fr', 'hr', 'hu', 'in', 'it', 'iw', 'kn', 'mr', 'nb', 'nl', 'pl', 'pt', 'ru', 'sk', 'sr', 'tr', 'uk'
		def utenteAruba = ""
		def passwordAruba = ""
		def utenteGeoNames = "demo"
		if (chiave) {
			utenteAruba = chiave['utenteAruba']
			passwordAruba = chiave['passwordAruba']
			utenteGeoNames = chiave['utenteGeoNames']
		}
		buildConfigField "String", "utenteAruba", "\""+utenteAruba+"\""
		buildConfigField "String", "passwordAruba", "\""+passwordAruba+"\""
		buildConfigField "String", "utenteGeoNames", "\""+utenteGeoNames+"\""
		buildConfigField "String", 'GIT_REPOSITORY', "\"" + getGitOriginRemote() + "\""
		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		multiDexEnabled true
	}
	buildTypes {
		debug {
			pseudoLocalesEnabled true
			if (System.getenv("CI") == "true") { // Github action
				signingConfig signingConfigs.debugCI
			}
		}
		release {
			shrinkResources true
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	packagingOptions {
		resources {
			excludes += ['**/*.properties', 'META-INF/*.md', 'META-INF/*.xml']
			pickFirsts += ['EventFact*.properties']
		}
	}

	// TODO remove this disable
	namespace 'app.familygem'
	lint {
		disable 'MissingConstraints', 'MissingTranslation'
	}

	applicationVariants.all { variant ->
		variant.outputs.all { output ->
			if (variant.name == "release") {
				def builtType = variant.buildType.name
				def vName = variant.versionName
				def vCode = variant.versionCode
				// def flavor = variant.flavorName
				def newName = "FamiliyGem"
				newName += "-${vName}-${vCode}-${builtType}.apk"
				outputFileName = newName
			}
			println "$variant.name: name is $outputFileName"
		}
	}
}

dependencies {
	implementation 'com.github.hannesa2:githubAppUpdate:1.5'
	implementation 'androidx.multidex:multidex:2.0.1'
	implementation 'commons-io:commons-io:2.11.0' // Versions from 2.9.0 to 2.11.0 give NoClassDefFoundError on old devices
	implementation 'com.google.code.gson:gson:2.10'
	implementation 'commons-net:commons-net:3.8.0'
	implementation 'androidx.lifecycle:lifecycle-process:2.5.1'
	//implementation 'org.familysearch.gedcom:gedcom:1.13.0'
	implementation files('libs/gedcom-1.14.0-SNAPSHOT.jar')
	implementation files('libs/slf4j-api-1.7.25.jar')
	implementation 'androidx.work:work-runtime:2.7.1'
	implementation 'androidx.appcompat:appcompat:1.7.0-alpha01'
	implementation 'com.android.installreferrer:installreferrer:2.2'
	implementation 'com.google.android.material:material:1.7.0'
	implementation 'com.google.android.flexbox:flexbox:3.0.0'
	implementation files('libs/gedcomgraph-3.2.jar')
	implementation 'joda-time:joda-time:2.12.0'
	implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
	implementation 'com.otaliastudios:zoomlayout:1.9.0'
	implementation 'com.github.AndroidDeveloperLB:FastScrollerAndRecyclerViewFixes:9'
	implementation 'org.jsoup:jsoup:1.15.3'
	implementation files('libs/geonames-1.1.14.jar')
	implementation 'com.squareup.picasso:picasso:2.71828'
	implementation 'org.jdom:jdom:2.0.2' // Don't update to version 2.x for compatibility with GeoNames
	implementation 'androidx.core:core-ktx:+'
	//androidTestImplementation 'androidx.test:runner:1.4.0'
}

static def getGitOriginRemote() {
	def process = "git remote -v".execute()
	def values = process.text.toString().trim().split("\\r\\n|\\n|\\r")

	def found = values.find { it.startsWith("origin") && it.endsWith("(push)") }
	return found.replace("origin", "").replace("(push)", "").replace(".git", "").trim()
}

static def getGitCommitCount() {
	def process = "git rev-list HEAD --count".execute()
	return process.text.toInteger()
}

static def getTag() {
	def process = "git describe --tags".execute()
	return process.text.toString().trim()
}
